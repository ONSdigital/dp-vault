// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-vault"
	"github.com/hashicorp/vault/api"
	"sync"
)

var (
	lockAPIClientMockHealth   sync.RWMutex
	lockAPIClientMockRead     sync.RWMutex
	lockAPIClientMockSetToken sync.RWMutex
	lockAPIClientMockWrite    sync.RWMutex
)

// Ensure, that APIClientMock does implement vault.APIClient.
// If this is not the case, regenerate this file with moq.
var _ vault.APIClient = &APIClientMock{}

// APIClientMock is a mock implementation of vault.APIClient.
//
//     func TestSomethingThatUsesAPIClient(t *testing.T) {
//
//         // make and configure a mocked vault.APIClient
//         mockedAPIClient := &APIClientMock{
//             HealthFunc: func() (*api.HealthResponse, error) {
// 	               panic("mock out the Health method")
//             },
//             ReadFunc: func(path string) (*api.Secret, error) {
// 	               panic("mock out the Read method")
//             },
//             SetTokenFunc: func(v string)  {
// 	               panic("mock out the SetToken method")
//             },
//             WriteFunc: func(path string, data map[string]interface{}) (*api.Secret, error) {
// 	               panic("mock out the Write method")
//             },
//         }
//
//         // use mockedAPIClient in code that requires vault.APIClient
//         // and then make assertions.
//
//     }
type APIClientMock struct {
	// HealthFunc mocks the Health method.
	HealthFunc func() (*api.HealthResponse, error)

	// ReadFunc mocks the Read method.
	ReadFunc func(path string) (*api.Secret, error)

	// SetTokenFunc mocks the SetToken method.
	SetTokenFunc func(v string)

	// WriteFunc mocks the Write method.
	WriteFunc func(path string, data map[string]interface{}) (*api.Secret, error)

	// calls tracks calls to the methods.
	calls struct {
		// Health holds details about calls to the Health method.
		Health []struct {
		}
		// Read holds details about calls to the Read method.
		Read []struct {
			// Path is the path argument value.
			Path string
		}
		// SetToken holds details about calls to the SetToken method.
		SetToken []struct {
			// V is the v argument value.
			V string
		}
		// Write holds details about calls to the Write method.
		Write []struct {
			// Path is the path argument value.
			Path string
			// Data is the data argument value.
			Data map[string]interface{}
		}
	}
}

// Health calls HealthFunc.
func (mock *APIClientMock) Health() (*api.HealthResponse, error) {
	if mock.HealthFunc == nil {
		panic("APIClientMock.HealthFunc: method is nil but APIClient.Health was just called")
	}
	callInfo := struct {
	}{}
	lockAPIClientMockHealth.Lock()
	mock.calls.Health = append(mock.calls.Health, callInfo)
	lockAPIClientMockHealth.Unlock()
	return mock.HealthFunc()
}

// HealthCalls gets all the calls that were made to Health.
// Check the length with:
//     len(mockedAPIClient.HealthCalls())
func (mock *APIClientMock) HealthCalls() []struct {
} {
	var calls []struct {
	}
	lockAPIClientMockHealth.RLock()
	calls = mock.calls.Health
	lockAPIClientMockHealth.RUnlock()
	return calls
}

// Read calls ReadFunc.
func (mock *APIClientMock) Read(path string) (*api.Secret, error) {
	if mock.ReadFunc == nil {
		panic("APIClientMock.ReadFunc: method is nil but APIClient.Read was just called")
	}
	callInfo := struct {
		Path string
	}{
		Path: path,
	}
	lockAPIClientMockRead.Lock()
	mock.calls.Read = append(mock.calls.Read, callInfo)
	lockAPIClientMockRead.Unlock()
	return mock.ReadFunc(path)
}

// ReadCalls gets all the calls that were made to Read.
// Check the length with:
//     len(mockedAPIClient.ReadCalls())
func (mock *APIClientMock) ReadCalls() []struct {
	Path string
} {
	var calls []struct {
		Path string
	}
	lockAPIClientMockRead.RLock()
	calls = mock.calls.Read
	lockAPIClientMockRead.RUnlock()
	return calls
}

// SetToken calls SetTokenFunc.
func (mock *APIClientMock) SetToken(v string) {
	if mock.SetTokenFunc == nil {
		panic("APIClientMock.SetTokenFunc: method is nil but APIClient.SetToken was just called")
	}
	callInfo := struct {
		V string
	}{
		V: v,
	}
	lockAPIClientMockSetToken.Lock()
	mock.calls.SetToken = append(mock.calls.SetToken, callInfo)
	lockAPIClientMockSetToken.Unlock()
	mock.SetTokenFunc(v)
}

// SetTokenCalls gets all the calls that were made to SetToken.
// Check the length with:
//     len(mockedAPIClient.SetTokenCalls())
func (mock *APIClientMock) SetTokenCalls() []struct {
	V string
} {
	var calls []struct {
		V string
	}
	lockAPIClientMockSetToken.RLock()
	calls = mock.calls.SetToken
	lockAPIClientMockSetToken.RUnlock()
	return calls
}

// Write calls WriteFunc.
func (mock *APIClientMock) Write(path string, data map[string]interface{}) (*api.Secret, error) {
	if mock.WriteFunc == nil {
		panic("APIClientMock.WriteFunc: method is nil but APIClient.Write was just called")
	}
	callInfo := struct {
		Path string
		Data map[string]interface{}
	}{
		Path: path,
		Data: data,
	}
	lockAPIClientMockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	lockAPIClientMockWrite.Unlock()
	return mock.WriteFunc(path, data)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//     len(mockedAPIClient.WriteCalls())
func (mock *APIClientMock) WriteCalls() []struct {
	Path string
	Data map[string]interface{}
} {
	var calls []struct {
		Path string
		Data map[string]interface{}
	}
	lockAPIClientMockWrite.RLock()
	calls = mock.calls.Write
	lockAPIClientMockWrite.RUnlock()
	return calls
}
